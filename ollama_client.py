# save_as: ollama_client.py
import requests
import json
import time

class OllamaClient:
    def __init__(self, base_url="http://localhost:11434"):
        self.base_url = base_url
        self.session = requests.Session()
        self.headers = {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }

    def check_health(self):
        try:
            response = self.session.get(f"{self.base_url}/", timeout=10)
            return response.status_code == 200
        except requests.exceptions.ConnectionError:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω:")
            print("docker-compose ps")
            return False

    def generate_text(self, model, prompt, max_retries=3):
        payload = {
            "model": model,
            "prompt": prompt,
            "stream": False,
            "options": {
                "temperature": 0.7,
                "num_predict": 200
            }
        }

        for attempt in range(max_retries):
            try:
                response = self.session.post(
                    f"{self.base_url}/api/generate",
                    headers=self.headers,
                    data=json.dumps(payload),
                    timeout=1000  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                )
                
                if response.status_code == 200:
                    return response.json().get('response')
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}): {response.text}")
                    time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
            except requests.exceptions.RequestException as e:
                print(f"üö® –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                time.sleep(5)

        return None

if __name__ == "__main__":
    client = OllamaClient()
    
    if not client.check_health():
        exit(1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    response = client.generate_text(
        model="deepseek-coder:6.7b",
        prompt='–ù–∞–ø–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç:"–í–∞—Å–∏–ª–∏–π —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª DeepSeek –ª–æ–∫–∞–ª—å–Ω–æ –≤ docker-compose"'
    )
    
    if response:
        print("‚úÖ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
        print(response)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å: docker-compose exec ollama ollama list")
        print("2. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–∞–º—è—Ç–∏: free -h")